package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;



parser code 
{:   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

            //Interfaz.lista_errores.add(new CError("Sintáctico", "No se esperaba este componente '" + s.value + "'", s.left, s.right));
    
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

terminal String mas,menos,por,division,parizquierdo,parderecho,igual,puntoycoma,llaveizq,llaveder,rint,rdouble,rchar,rboolean,rstring,rclass,coma,rvoid;
terminal String entero,doble,rtrue,rfalse,cadena,caracter,id,rprintln,rprint,rprinttabla;
terminal String menorque,mayorque,menorigualque,mayorigualque,igualigual,diferenteque,or,and,xor,not,rif,relse,rwhile,rbreak,rcontinue,modulo,rfor,rdo,rswitch,rcase,rdefault,dospuntos,interrogacion,masmas,menosmenos,rpow,rreturn,corizquierdo,corderecho,rnew,rpublic,rprotected,rprivate,rabstract,rstatic,rfinal,rstr,rtoDouble,rtoInt,rtoChar,rextends,punto,rthis,rnull,rimport,
rgraph,rsuper,rread_file,rwrite_file,rinstanceof,rread;

terminal umenos; //Para manejar el - E

non terminal INICIO;
non terminal L_INSTRUCCIONES;
non terminal INSTRUCCION,DECLARACION,ASIGNACION, IMPRIMIR;
non terminal E;
non terminal T;


//Operaciones numericas
//precedence left interrogacion; //Así lo tenía antes
precedence right interrogacion,dospuntos;


precedence left or;
precedence left and;
precedence left xor;
precedence right not;

precedence left menorque,menorigualque,mayorque,mayorigualque,igualigual,diferenteque;

precedence left mas,menos;
precedence left por,division,modulo;
//precedence left potencia;
//precedence left masmas,menosmenos; //Así lo tenía antes

precedence left punto; //Para los accesos

precedence left umenos;

start with INICIO; 

INICIO::= L_INSTRUCCIONES:a
    {:
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    
        
    :}
;


L_INSTRUCCIONES ::= L_INSTRUCCIONES:a INSTRUCCION:b {:  :}
                            | INSTRUCCION:a {:  :}
;

INSTRUCCION ::= DECLARACION:a puntoycoma {:  :}
            | ASIGNACION:a puntoycoma {:  :}
            | IMPRIMIR:a puntoycoma{:  :}
;



DECLARACION ::= 
        T:a id:b igual E:c {:  :}
        | T:a id:b {:  :}
;

ASIGNACION ::= 
                id:a igual E:b {:  :}
                //| id:a L_DIMENSIONES_EXPRESION:b igual E:c {: RESULT = new AsignacionArreglo(a,aleft,aright,b,c); :}
;

T ::= rint:a {:  :}
    | rchar {:  :}
    | rboolean {:  :}
    | rdouble {:  :}
    | rstring {:  :}
;

IMPRIMIR ::= rprintln parizquierdo E:a parderecho {:  :}
    | rprint parizquierdo E:a parderecho {:  :}
;







E ::= 
        entero:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); :}
        | caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); :}
        //| caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a); :}
        | rtrue {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); :}
        | rfalse {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); :}
        | doble:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); :}
        | cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a.replace("\"","")); :}
        //| cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a); :}
        

        | id:a {: RESULT = new Id(a, aleft,aright); :}
;